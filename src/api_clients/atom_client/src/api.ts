// tslint:disable
/**
 * Atom API
 * This is the api used for gym projects
 *
 * The version of the OpenAPI document: 0.100000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddEditAttendance
 */
export interface AddEditAttendance {
    /**
     * 
     * @type {Array<RequestsUserAttendance>}
     * @memberof AddEditAttendance
     */
    usersAttendance?: Array<RequestsUserAttendance>;
}
/**
 * 
 * @export
 * @interface AddGym
 */
export interface AddGym {
    /**
     * 
     * @type {string}
     * @memberof AddGym
     */
    bio?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddGym
     */
    coverImage?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddGym
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof AddGym
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof AddGym
     */
    virtual?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddGym
     */
    website?: string | null;
}
/**
 * 
 * @export
 * @interface AddProduct
 */
export interface AddProduct {
    /**
     * defines if the product creates a membership
     * @type {boolean}
     * @memberof AddProduct
     */
    isMembership?: boolean;
    /**
     * defines if the product creates a subscription
     * @type {boolean}
     * @memberof AddProduct
     */
    isSubscription?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddProduct
     */
    name: string;
    /**
     * Specifies prices
     * @type {Array<RequestsPrice>}
     * @memberof AddProduct
     */
    prices: Array<RequestsPrice>;
}
/**
 * 
 * @export
 * @interface AddWorkout
 */
export interface AddWorkout {
    /**
     * 
     * @type {string}
     * @memberof AddWorkout
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AddWorkout
     */
    schedule?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AddWorkout
     */
    seats?: number;
    /**
     * 
     * @type {Array<RequestsAddWorkoutSection>}
     * @memberof AddWorkout
     */
    sections?: Array<RequestsAddWorkoutSection>;
}
/**
 * 
 * @export
 * @interface DbmodelsBusinessDetails
 */
export interface DbmodelsBusinessDetails {
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    billingCity?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    billingState?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    billingStreet1?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    billingStreet2?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    billingZip?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    legalName?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    salesTaxNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    unid?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof DbmodelsBusinessDetails
     */
    website?: string;
}
/**
 * 
 * @export
 * @interface EditGym
 */
export interface EditGym {
    /**
     * 
     * @type {string}
     * @memberof EditGym
     */
    bio?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditGym
     */
    coverImage?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditGym
     */
    logo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditGym
     */
    name?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EditGym
     */
    virtual?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof EditGym
     */
    website?: string | null;
}
/**
 * 
 * @export
 * @interface EditProfile
 */
export interface EditProfile {
    /**
     * format yyyy-mm-dd
     * @type {string}
     * @memberof EditProfile
     */
    birthDate: string;
    /**
     * 
     * @type {RequestsBusinessDetails}
     * @memberof EditProfile
     */
    businessDetails?: RequestsBusinessDetails;
    /**
     * 
     * @type {string}
     * @memberof EditProfile
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof EditProfile
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof EditProfile
     */
    gender: string;
    /**
     * 
     * @type {string}
     * @memberof EditProfile
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof EditProfile
     */
    notes?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditProfile
     */
    password?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditProfile
     */
    phoneNumber: string;
}
/**
 * 
 * @export
 * @interface EditWorkout
 */
export interface EditWorkout {
    /**
     * 
     * @type {string}
     * @memberof EditWorkout
     */
    name: string;
}
/**
 * 
 * @export
 * @interface ForgotPassword
 */
export interface ForgotPassword {
    /**
     * 
     * @type {string}
     * @memberof ForgotPassword
     */
    email: string;
}
/**
 * 
 * @export
 * @interface InitiateMember
 */
export interface InitiateMember {
    /**
     * 
     * @type {string}
     * @memberof InitiateMember
     */
    email?: string;
}
/**
 * 
 * @export
 * @interface LoginAccount
 */
export interface LoginAccount {
    /**
     * 
     * @type {string}
     * @memberof LoginAccount
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginAccount
     */
    password: string;
}
/**
 * 
 * @export
 * @interface MiscmodelsImportSubscription
 */
export interface MiscmodelsImportSubscription {
    /**
     * 
     * @type {boolean}
     * @memberof MiscmodelsImportSubscription
     */
    active?: boolean;
    /**
     * 
     * @type {Array<MiscmodelsImportSubscriptionPriceForUser>}
     * @memberof MiscmodelsImportSubscription
     */
    prices?: Array<MiscmodelsImportSubscriptionPriceForUser>;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportSubscription
     */
    subscriptionID?: string;
}
/**
 * 
 * @export
 * @interface MiscmodelsImportSubscriptionPrice
 */
export interface MiscmodelsImportSubscriptionPrice {
    /**
     * 
     * @type {boolean}
     * @memberof MiscmodelsImportSubscriptionPrice
     */
    _import: boolean;
    /**
     * 
     * @type {number}
     * @memberof MiscmodelsImportSubscriptionPrice
     */
    interval: number;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportSubscriptionPrice
     */
    intervalType: string;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportSubscriptionPrice
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof MiscmodelsImportSubscriptionPrice
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportSubscriptionPrice
     */
    stripeID: string;
    /**
     * 
     * @type {number}
     * @memberof MiscmodelsImportSubscriptionPrice
     */
    trialDays: number;
}
/**
 * 
 * @export
 * @interface MiscmodelsImportSubscriptionPriceForUser
 */
export interface MiscmodelsImportSubscriptionPriceForUser {
    /**
     * 
     * @type {number}
     * @memberof MiscmodelsImportSubscriptionPriceForUser
     */
    interval: number;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportSubscriptionPriceForUser
     */
    intervalType: string;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportSubscriptionPriceForUser
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof MiscmodelsImportSubscriptionPriceForUser
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportSubscriptionPriceForUser
     */
    stripeID: string;
    /**
     * 
     * @type {number}
     * @memberof MiscmodelsImportSubscriptionPriceForUser
     */
    trialDays: number;
}
/**
 * 
 * @export
 * @interface MiscmodelsImportSubscriptionProduct
 */
export interface MiscmodelsImportSubscriptionProduct {
    /**
     * 
     * @type {boolean}
     * @memberof MiscmodelsImportSubscriptionProduct
     */
    _import?: boolean;
    /**
     * defines if the product creates a membership
     * @type {boolean}
     * @memberof MiscmodelsImportSubscriptionProduct
     */
    isMembership?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportSubscriptionProduct
     */
    name?: string;
    /**
     * Specifies plans for subscription type products. Required if price is not defined.
     * @type {Array<MiscmodelsImportSubscriptionPrice>}
     * @memberof MiscmodelsImportSubscriptionProduct
     */
    prices?: Array<MiscmodelsImportSubscriptionPrice>;
    /**
     * defines if the product creates a membership
     * @type {string}
     * @memberof MiscmodelsImportSubscriptionProduct
     */
    stripeID?: string;
}
/**
 * 
 * @export
 * @interface MiscmodelsImportUser
 */
export interface MiscmodelsImportUser {
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportUser
     */
    customerID?: string;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportUser
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportUser
     */
    firstName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MiscmodelsImportUser
     */
    _import?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MiscmodelsImportUser
     */
    lastName?: string;
    /**
     * 
     * @type {Array<MiscmodelsImportSubscription>}
     * @memberof MiscmodelsImportUser
     */
    subscriptions?: Array<MiscmodelsImportSubscription>;
}
/**
 * 
 * @export
 * @interface ProductPurchase
 */
export interface ProductPurchase {
    /**
     * Existing card unid. Required if cardTokenID is not defined
     * @type {string}
     * @memberof ProductPurchase
     */
    cardUnid?: string | null;
    /**
     * 
     * @type {RequestsNewCardToken}
     * @memberof ProductPurchase
     */
    newCard?: RequestsNewCardToken;
    /**
     * 
     * @type {string}
     * @memberof ProductPurchase
     */
    priceUnid: string;
    /**
     * 
     * @type {string}
     * @memberof ProductPurchase
     */
    productUnid: string;
}
/**
 * 
 * @export
 * @interface PutGymInfo
 */
export interface PutGymInfo {
    /**
     * 
     * @type {string}
     * @memberof PutGymInfo
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface PutGymInfo1
 */
export interface PutGymInfo1 {
    /**
     * 
     * @type {string}
     * @memberof PutGymInfo1
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface PutGymInfo2
 */
export interface PutGymInfo2 {
    /**
     * 
     * @type {string}
     * @memberof PutGymInfo2
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface PutGymInfo3
 */
export interface PutGymInfo3 {
    /**
     * 
     * @type {string}
     * @memberof PutGymInfo3
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface PutGymInfo4
 */
export interface PutGymInfo4 {
    /**
     * 
     * @type {string}
     * @memberof PutGymInfo4
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface PutGymInfo5
 */
export interface PutGymInfo5 {
    /**
     * 
     * @type {string}
     * @memberof PutGymInfo5
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface RequestsAddWorkoutMovement
 */
export interface RequestsAddWorkoutMovement {
    /**
     * 
     * @type {string}
     * @memberof RequestsAddWorkoutMovement
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof RequestsAddWorkoutMovement
     */
    quantity?: number;
}
/**
 * 
 * @export
 * @interface RequestsAddWorkoutSection
 */
export interface RequestsAddWorkoutSection {
    /**
     * 
     * @type {Array<RequestsAddWorkoutMovement>}
     * @memberof RequestsAddWorkoutSection
     */
    movements?: Array<RequestsAddWorkoutMovement>;
    /**
     * 
     * @type {string}
     * @memberof RequestsAddWorkoutSection
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface RequestsBusinessDetails
 */
export interface RequestsBusinessDetails {
    /**
     * 
     * @type {string}
     * @memberof RequestsBusinessDetails
     */
    billingCity?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestsBusinessDetails
     */
    billingState?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestsBusinessDetails
     */
    billingStreet1?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestsBusinessDetails
     */
    billingStreet2?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestsBusinessDetails
     */
    billingZip?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestsBusinessDetails
     */
    legalName?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestsBusinessDetails
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestsBusinessDetails
     */
    salesTaxNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestsBusinessDetails
     */
    website?: string;
}
/**
 * required if cardID is not defined
 * @export
 * @interface RequestsNewCardToken
 */
export interface RequestsNewCardToken {
    /**
     * 
     * @type {string}
     * @memberof RequestsNewCardToken
     */
    paymentMethodID?: string;
    /**
     * ignored if card is used for a subscription
     * @type {boolean}
     * @memberof RequestsNewCardToken
     */
    save?: boolean;
}
/**
 * 
 * @export
 * @interface RequestsPrice
 */
export interface RequestsPrice {
    /**
     * 
     * @type {number}
     * @memberof RequestsPrice
     */
    interval: number | null;
    /**
     * 
     * @type {string}
     * @memberof RequestsPrice
     */
    intervalType: string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestsPrice
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RequestsPrice
     */
    price: number;
    /**
     * 
     * @type {number}
     * @memberof RequestsPrice
     */
    trialDays: number | null;
}
/**
 * 
 * @export
 * @interface RequestsUserAttendance
 */
export interface RequestsUserAttendance {
    /**
     * 
     * @type {number}
     * @memberof RequestsUserAttendance
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof RequestsUserAttendance
     */
    userUnid?: string;
}
/**
 * 
 * @export
 * @interface ResetPassword
 */
export interface ResetPassword {
    /**
     * 
     * @type {string}
     * @memberof ResetPassword
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ResponsesAdminLoginResponse
 */
export interface ResponsesAdminLoginResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesAdminLoginResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesAdminLoginResponseData}
     * @memberof ResponsesAdminLoginResponse
     */
    data: ResponsesAdminLoginResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesAdminLoginResponseData
 */
export interface ResponsesAdminLoginResponseData {
    /**
     * 
     * @type {ResponsesAdminProfile}
     * @memberof ResponsesAdminLoginResponseData
     */
    admin: ResponsesAdminProfile;
    /**
     * 
     * @type {ResponsesAdminOnBoarding}
     * @memberof ResponsesAdminLoginResponseData
     */
    onBoarding: ResponsesAdminOnBoarding;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminLoginResponseData
     */
    token: string;
}
/**
 * 
 * @export
 * @interface ResponsesAdminOnBoarding
 */
export interface ResponsesAdminOnBoarding {
    /**
     * 
     * @type {boolean}
     * @memberof ResponsesAdminOnBoarding
     */
    addedProducts: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ResponsesAdminOnBoarding
     */
    createdGym: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ResponsesAdminOnBoarding
     */
    paid: boolean;
}
/**
 * 
 * @export
 * @interface ResponsesAdminProfile
 */
export interface ResponsesAdminProfile {
    /**
     * 
     * @type {boolean}
     * @memberof ResponsesAdminProfile
     */
    adminOnBoardingComplete: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminProfile
     */
    birthDate: string | null;
    /**
     * 
     * @type {DbmodelsBusinessDetails}
     * @memberof ResponsesAdminProfile
     */
    businessDetails: DbmodelsBusinessDetails;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminProfile
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminProfile
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminProfile
     */
    firstName: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminProfile
     */
    gender: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminProfile
     */
    lastName: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminProfile
     */
    notes: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminProfile
     */
    phoneNumber: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminProfile
     */
    unid: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAdminProfile
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface ResponsesAdminProfileResponse
 */
export interface ResponsesAdminProfileResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesAdminProfileResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesAdminProfileResponseData}
     * @memberof ResponsesAdminProfileResponse
     */
    data: ResponsesAdminProfileResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesAdminProfileResponseData
 */
export interface ResponsesAdminProfileResponseData {
    /**
     * 
     * @type {ResponsesAdminProfile}
     * @memberof ResponsesAdminProfileResponseData
     */
    admin: ResponsesAdminProfile;
    /**
     * 
     * @type {ResponsesAdminOnBoarding}
     * @memberof ResponsesAdminProfileResponseData
     */
    onBoarding: ResponsesAdminOnBoarding;
}
/**
 * 
 * @export
 * @interface ResponsesAppErrorResponse
 */
export interface ResponsesAppErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesAppErrorResponse
     */
    api_version: number;
    /**
     * 
     * @type {number}
     * @memberof ResponsesAppErrorResponse
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAppErrorResponse
     */
    message: string;
}
/**
 * 
 * @export
 * @interface ResponsesAtomProduct
 */
export interface ResponsesAtomProduct {
    /**
     * 
     * @type {string}
     * @memberof ResponsesAtomProduct
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAtomProduct
     */
    name?: string | null;
    /**
     * 
     * @type {Array<ResponsesAtomProductPrice>}
     * @memberof ResponsesAtomProduct
     */
    prices: Array<ResponsesAtomProductPrice>;
    /**
     * 
     * @type {boolean}
     * @memberof ResponsesAtomProduct
     */
    subscription?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAtomProduct
     */
    unid: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAtomProduct
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface ResponsesAtomProductPrice
 */
export interface ResponsesAtomProductPrice {
    /**
     * 
     * @type {string}
     * @memberof ResponsesAtomProductPrice
     */
    createdAt: string;
    /**
     * 
     * @type {number}
     * @memberof ResponsesAtomProductPrice
     */
    interval: number | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAtomProductPrice
     */
    intervalType: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAtomProductPrice
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ResponsesAtomProductPrice
     */
    price: number;
    /**
     * 
     * @type {number}
     * @memberof ResponsesAtomProductPrice
     */
    trialDays: number | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAtomProductPrice
     */
    unid: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesAtomProductPrice
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface ResponsesAtomProductsResponse
 */
export interface ResponsesAtomProductsResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesAtomProductsResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesAtomProductsResponseData}
     * @memberof ResponsesAtomProductsResponse
     */
    data: ResponsesAtomProductsResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesAtomProductsResponseData
 */
export interface ResponsesAtomProductsResponseData {
    /**
     * 
     * @type {Array<ResponsesAtomProduct>}
     * @memberof ResponsesAtomProductsResponseData
     */
    products: Array<ResponsesAtomProduct>;
}
/**
 * 
 * @export
 * @interface ResponsesBaseResponse
 */
export interface ResponsesBaseResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesBaseResponse
     */
    api_version: number;
}
/**
 * 
 * @export
 * @interface ResponsesClassAttendanceListEntry
 */
export interface ResponsesClassAttendanceListEntry {
    /**
     * 
     * @type {number}
     * @memberof ResponsesClassAttendanceListEntry
     */
    attendanceStatus: number;
    /**
     * 
     * @type {string}
     * @memberof ResponsesClassAttendanceListEntry
     */
    userUnid: string;
}
/**
 * 
 * @export
 * @interface ResponsesGetStripeImportProductsResponse
 */
export interface ResponsesGetStripeImportProductsResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesGetStripeImportProductsResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesGetStripeImportProductsResponseData}
     * @memberof ResponsesGetStripeImportProductsResponse
     */
    data: ResponsesGetStripeImportProductsResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesGetStripeImportProductsResponseData
 */
export interface ResponsesGetStripeImportProductsResponseData {
    /**
     * 
     * @type {Array<MiscmodelsImportSubscriptionProduct>}
     * @memberof ResponsesGetStripeImportProductsResponseData
     */
    products: Array<MiscmodelsImportSubscriptionProduct>;
}
/**
 * 
 * @export
 * @interface ResponsesGetStripeImportUsersResponse
 */
export interface ResponsesGetStripeImportUsersResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesGetStripeImportUsersResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesGetStripeImportUsersResponseData}
     * @memberof ResponsesGetStripeImportUsersResponse
     */
    data: ResponsesGetStripeImportUsersResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesGetStripeImportUsersResponseData
 */
export interface ResponsesGetStripeImportUsersResponseData {
    /**
     * 
     * @type {Array<MiscmodelsImportUser>}
     * @memberof ResponsesGetStripeImportUsersResponseData
     */
    users: Array<MiscmodelsImportUser>;
}
/**
 * 
 * @export
 * @interface ResponsesGym
 */
export interface ResponsesGym {
    /**
     * 
     * @type {string}
     * @memberof ResponsesGym
     */
    bio: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGym
     */
    coverImage: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGym
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGym
     */
    logo: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGym
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGym
     */
    unid: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGym
     */
    updatedAt: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResponsesGym
     */
    virtual: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGym
     */
    website: string | null;
}
/**
 * 
 * @export
 * @interface ResponsesGymInfo
 */
export interface ResponsesGymInfo {
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymInfo
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymInfo
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymInfo
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymInfo
     */
    unid: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymInfo
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface ResponsesGymInfoResponse
 */
export interface ResponsesGymInfoResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymInfoResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesGymInfoResponseData}
     * @memberof ResponsesGymInfoResponse
     */
    data: ResponsesGymInfoResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesGymInfoResponseData
 */
export interface ResponsesGymInfoResponseData {
    /**
     * 
     * @type {ResponsesGymInfo}
     * @memberof ResponsesGymInfoResponseData
     */
    gymInfo: ResponsesGymInfo;
}
/**
 * 
 * @export
 * @interface ResponsesGymProduct
 */
export interface ResponsesGymProduct {
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymProduct
     */
    createdAt: string;
    /**
     * 
     * @type {boolean}
     * @memberof ResponsesGymProduct
     */
    isMembership: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ResponsesGymProduct
     */
    isSubscription: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymProduct
     */
    name: string;
    /**
     * 
     * @type {Array<ResponsesGymProductPrice>}
     * @memberof ResponsesGymProduct
     */
    prices: Array<ResponsesGymProductPrice>;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymProduct
     */
    unid: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymProduct
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface ResponsesGymProductPrice
 */
export interface ResponsesGymProductPrice {
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymProductPrice
     */
    createdAt: string;
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymProductPrice
     */
    interval: number | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymProductPrice
     */
    intervalType: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymProductPrice
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymProductPrice
     */
    price: number;
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymProductPrice
     */
    trialDays: number | null;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymProductPrice
     */
    unid: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesGymProductPrice
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface ResponsesGymProductResponse
 */
export interface ResponsesGymProductResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymProductResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesGymProductResponseData}
     * @memberof ResponsesGymProductResponse
     */
    data: ResponsesGymProductResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesGymProductResponseData
 */
export interface ResponsesGymProductResponseData {
    /**
     * 
     * @type {ResponsesGymProduct}
     * @memberof ResponsesGymProductResponseData
     */
    gymProduct: ResponsesGymProduct;
}
/**
 * 
 * @export
 * @interface ResponsesGymProductsWithPlansResponse
 */
export interface ResponsesGymProductsWithPlansResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymProductsWithPlansResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesGymProductsWithPlansResponseData}
     * @memberof ResponsesGymProductsWithPlansResponse
     */
    data: ResponsesGymProductsWithPlansResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesGymProductsWithPlansResponseData
 */
export interface ResponsesGymProductsWithPlansResponseData {
    /**
     * 
     * @type {Array<ResponsesGymProduct>}
     * @memberof ResponsesGymProductsWithPlansResponseData
     */
    gymProducts: Array<ResponsesGymProduct>;
}
/**
 * 
 * @export
 * @interface ResponsesGymResponse
 */
export interface ResponsesGymResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesGymResponseData}
     * @memberof ResponsesGymResponse
     */
    data: ResponsesGymResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesGymResponseData
 */
export interface ResponsesGymResponseData {
    /**
     * 
     * @type {ResponsesGym}
     * @memberof ResponsesGymResponseData
     */
    gym: ResponsesGym;
}
/**
 * 
 * @export
 * @interface ResponsesGymWorkoutClassAttendanceListResponse
 */
export interface ResponsesGymWorkoutClassAttendanceListResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymWorkoutClassAttendanceListResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesGymWorkoutClassAttendanceListResponseData}
     * @memberof ResponsesGymWorkoutClassAttendanceListResponse
     */
    data: ResponsesGymWorkoutClassAttendanceListResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesGymWorkoutClassAttendanceListResponseData
 */
export interface ResponsesGymWorkoutClassAttendanceListResponseData {
    /**
     * 
     * @type {Array<ResponsesClassAttendanceListEntry>}
     * @memberof ResponsesGymWorkoutClassAttendanceListResponseData
     */
    gymWorkoutClassAttendanceList: Array<ResponsesClassAttendanceListEntry>;
}
/**
 * 
 * @export
 * @interface ResponsesGymWorkoutResponse
 */
export interface ResponsesGymWorkoutResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymWorkoutResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesGymWorkoutResponseData}
     * @memberof ResponsesGymWorkoutResponse
     */
    data: ResponsesGymWorkoutResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesGymWorkoutResponseData
 */
export interface ResponsesGymWorkoutResponseData {
    /**
     * 
     * @type {ResponsesWorkout}
     * @memberof ResponsesGymWorkoutResponseData
     */
    gymWorkout: ResponsesWorkout;
}
/**
 * 
 * @export
 * @interface ResponsesGymWorkoutsResponse
 */
export interface ResponsesGymWorkoutsResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymWorkoutsResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesGymWorkoutsResponseData}
     * @memberof ResponsesGymWorkoutsResponse
     */
    data: ResponsesGymWorkoutsResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesGymWorkoutsResponseData
 */
export interface ResponsesGymWorkoutsResponseData {
    /**
     * 
     * @type {Array<ResponsesWorkout>}
     * @memberof ResponsesGymWorkoutsResponseData
     */
    gymWorkouts: Array<ResponsesWorkout>;
}
/**
 * 
 * @export
 * @interface ResponsesGymsResponse
 */
export interface ResponsesGymsResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesGymsResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesGymsResponseData}
     * @memberof ResponsesGymsResponse
     */
    data: ResponsesGymsResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesGymsResponseData
 */
export interface ResponsesGymsResponseData {
    /**
     * 
     * @type {Array<ResponsesGym>}
     * @memberof ResponsesGymsResponseData
     */
    gyms: Array<ResponsesGym>;
}
/**
 * 
 * @export
 * @interface ResponsesJoinGymResponse
 */
export interface ResponsesJoinGymResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesJoinGymResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesJoinGymResponseData}
     * @memberof ResponsesJoinGymResponse
     */
    data: ResponsesJoinGymResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesJoinGymResponseData
 */
export interface ResponsesJoinGymResponseData {
    /**
     * 
     * @type {string}
     * @memberof ResponsesJoinGymResponseData
     */
    link: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesJoinGymResponseData
     */
    token: string;
}
/**
 * 
 * @export
 * @interface ResponsesStripeConnectLinkResponse
 */
export interface ResponsesStripeConnectLinkResponse {
    /**
     * 
     * @type {number}
     * @memberof ResponsesStripeConnectLinkResponse
     */
    api_version: number;
    /**
     * 
     * @type {ResponsesStripeConnectLinkResponseData}
     * @memberof ResponsesStripeConnectLinkResponse
     */
    data: ResponsesStripeConnectLinkResponseData;
}
/**
 * 
 * @export
 * @interface ResponsesStripeConnectLinkResponseData
 */
export interface ResponsesStripeConnectLinkResponseData {
    /**
     * 
     * @type {string}
     * @memberof ResponsesStripeConnectLinkResponseData
     */
    link: string;
}
/**
 * 
 * @export
 * @interface ResponsesWorkout
 */
export interface ResponsesWorkout {
    /**
     * 
     * @type {string}
     * @memberof ResponsesWorkout
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesWorkout
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesWorkout
     */
    schedule: string | null;
    /**
     * 
     * @type {number}
     * @memberof ResponsesWorkout
     */
    seats: number;
    /**
     * 
     * @type {Array<ResponsesWorkoutSection>}
     * @memberof ResponsesWorkout
     */
    sections: Array<ResponsesWorkoutSection>;
    /**
     * 
     * @type {string}
     * @memberof ResponsesWorkout
     */
    unid: string;
    /**
     * 
     * @type {string}
     * @memberof ResponsesWorkout
     */
    updatedAt: string;
}
/**
 * 
 * @export
 * @interface ResponsesWorkoutMovement
 */
export interface ResponsesWorkoutMovement {
    /**
     * 
     * @type {string}
     * @memberof ResponsesWorkoutMovement
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ResponsesWorkoutMovement
     */
    quantity: number;
}
/**
 * 
 * @export
 * @interface ResponsesWorkoutSection
 */
export interface ResponsesWorkoutSection {
    /**
     * 
     * @type {Array<ResponsesWorkoutMovement>}
     * @memberof ResponsesWorkoutSection
     */
    movements: Array<ResponsesWorkoutMovement>;
    /**
     * 
     * @type {string}
     * @memberof ResponsesWorkoutSection
     */
    name: string;
}
/**
 * 
 * @export
 * @interface SignUpAccount
 */
export interface SignUpAccount {
    /**
     * 
     * @type {string}
     * @memberof SignUpAccount
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpAccount
     */
    password: string;
}

/**
 * AdminClassesApi - axios parameter creator
 * @export
 */
export const AdminClassesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} classUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _20182e299c9d4a46Bbb964eb249be285(classUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'classUnid' is not null or undefined
            if (classUnid === null || classUnid === undefined) {
                throw new RequiredError('classUnid','Required parameter classUnid was null or undefined when calling _20182e299c9d4a46Bbb964eb249be285.');
            }
            const localVarPath = `/admins/classes/{classUnid}/attendance`
                .replace(`{${"classUnid"}}`, encodeURIComponent(String(classUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} classUnid 
         * @param {AddEditAttendance} addEditAttendance 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClassAttendance(classUnid: string, addEditAttendance: AddEditAttendance, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'classUnid' is not null or undefined
            if (classUnid === null || classUnid === undefined) {
                throw new RequiredError('classUnid','Required parameter classUnid was null or undefined when calling addClassAttendance.');
            }
            // verify required parameter 'addEditAttendance' is not null or undefined
            if (addEditAttendance === null || addEditAttendance === undefined) {
                throw new RequiredError('addEditAttendance','Required parameter addEditAttendance was null or undefined when calling addClassAttendance.');
            }
            const localVarPath = `/admins/classes/{classUnid}/attendance`
                .replace(`{${"classUnid"}}`, encodeURIComponent(String(classUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof addEditAttendance !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(addEditAttendance !== undefined ? addEditAttendance : {}) : (addEditAttendance || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} classUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassAttendance(classUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'classUnid' is not null or undefined
            if (classUnid === null || classUnid === undefined) {
                throw new RequiredError('classUnid','Required parameter classUnid was null or undefined when calling getClassAttendance.');
            }
            const localVarPath = `/admins/classes/{classUnid}/attendance`
                .replace(`{${"classUnid"}}`, encodeURIComponent(String(classUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminClassesApi - functional programming interface
 * @export
 */
export const AdminClassesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} classUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _20182e299c9d4a46Bbb964eb249be285(classUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminClassesApiAxiosParamCreator(configuration)._20182e299c9d4a46Bbb964eb249be285(classUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} classUnid 
         * @param {AddEditAttendance} addEditAttendance 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClassAttendance(classUnid: string, addEditAttendance: AddEditAttendance, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminClassesApiAxiosParamCreator(configuration).addClassAttendance(classUnid, addEditAttendance, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} classUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassAttendance(classUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymWorkoutClassAttendanceListResponse> {
            const localVarAxiosArgs = AdminClassesApiAxiosParamCreator(configuration).getClassAttendance(classUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminClassesApi - factory interface
 * @export
 */
export const AdminClassesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} classUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _20182e299c9d4a46Bbb964eb249be285(classUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminClassesApiFp(configuration)._20182e299c9d4a46Bbb964eb249be285(classUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} classUnid 
         * @param {AddEditAttendance} addEditAttendance 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClassAttendance(classUnid: string, addEditAttendance: AddEditAttendance, token?: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminClassesApiFp(configuration).addClassAttendance(classUnid, addEditAttendance, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} classUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassAttendance(classUnid: string, token?: string, options?: any): AxiosPromise<ResponsesGymWorkoutClassAttendanceListResponse> {
            return AdminClassesApiFp(configuration).getClassAttendance(classUnid, token, options)(axios, basePath);
        },
    };
};

/**
 * AdminClassesApi - object-oriented interface
 * @export
 * @class AdminClassesApi
 * @extends {BaseAPI}
 */
export class AdminClassesApi extends BaseAPI {
    /**
     * 
     * @param {string} classUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminClassesApi
     */
    public _20182e299c9d4a46Bbb964eb249be285(classUnid: string, options?: any) {
        return AdminClassesApiFp(this.configuration)._20182e299c9d4a46Bbb964eb249be285(classUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} classUnid 
     * @param {AddEditAttendance} addEditAttendance 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminClassesApi
     */
    public addClassAttendance(classUnid: string, addEditAttendance: AddEditAttendance, token?: string, options?: any) {
        return AdminClassesApiFp(this.configuration).addClassAttendance(classUnid, addEditAttendance, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} classUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminClassesApi
     */
    public getClassAttendance(classUnid: string, token?: string, options?: any) {
        return AdminClassesApiFp(this.configuration).getClassAttendance(classUnid, token, options)(this.axios, this.basePath);
    }

}


/**
 * AdminGymsApi - axios parameter creator
 * @export
 */
export const AdminGymsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0045155a04564473B7b2A09b0ce9fa65(gymUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling _0045155a04564473B7b2A09b0ce9fa65.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/workouts`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _123525dcF5584afb8741C4553d4ca3fc(gymUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling _123525dcF5584afb8741C4553d4ca3fc.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/waiver`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _15784722010a41baB0a35c520f50f606(gymUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling _15784722010a41baB0a35c520f50f606.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/about`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _3658e5e09ee641bbA7e2Fad9a99248d6(gymUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling _3658e5e09ee641bbA7e2Fad9a99248d6.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/faq`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _738b80b2E8ba46d088baD6992a6ff428(gymUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling _738b80b2E8ba46d088baD6992a6ff428.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/privacy`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _7e5ba651A39d4b41B457871cd26036de(options: any = {}): RequestArgs {
            const localVarPath = `/admins/gyms/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a08006eb8c004d7cB2599b26534382e7(gymUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling a08006eb8c004d7cB2599b26534382e7.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a8d4259979c947b8962cE5f60117d4f7(gymUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling a8d4259979c947b8962cE5f60117d4f7.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/members`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddGym} addGym 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGym(addGym: AddGym, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'addGym' is not null or undefined
            if (addGym === null || addGym === undefined) {
                throw new RequiredError('addGym','Required parameter addGym was null or undefined when calling addGym.');
            }
            const localVarPath = `/admins/gyms/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof addGym !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(addGym !== undefined ? addGym : {}) : (addGym || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {AddProduct} addProduct 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGymProduct(gymUnid: string, addProduct: AddProduct, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling addGymProduct.');
            }
            // verify required parameter 'addProduct' is not null or undefined
            if (addProduct === null || addProduct === undefined) {
                throw new RequiredError('addProduct','Required parameter addProduct was null or undefined when calling addGymProduct.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/products`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof addProduct !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(addProduct !== undefined ? addProduct : {}) : (addProduct || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {AddWorkout} addWorkout 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGymWorkout(gymUnid: string, addWorkout: AddWorkout, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling addGymWorkout.');
            }
            // verify required parameter 'addWorkout' is not null or undefined
            if (addWorkout === null || addWorkout === undefined) {
                throw new RequiredError('addWorkout','Required parameter addWorkout was null or undefined when calling addGymWorkout.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/workouts`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof addWorkout !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(addWorkout !== undefined ? addWorkout : {}) : (addWorkout || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAbout(gymUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminGetAbout.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/about`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetFAQ(gymUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminGetFAQ.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/faq`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGymProducts(gymUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminGetGymProducts.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/products`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGymWorkouts(gymUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminGetGymWorkouts.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/workouts`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPolicy(gymUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminGetPolicy.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/policy`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPrivacy(gymUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminGetPrivacy.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/privacy`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTerms(gymUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminGetTerms.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/terms`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetWaiver(gymUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminGetWaiver.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/waiver`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo} putGymInfo 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutAbout(gymUnid: string, putGymInfo: PutGymInfo, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminPutAbout.');
            }
            // verify required parameter 'putGymInfo' is not null or undefined
            if (putGymInfo === null || putGymInfo === undefined) {
                throw new RequiredError('putGymInfo','Required parameter putGymInfo was null or undefined when calling adminPutAbout.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/about`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof putGymInfo !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(putGymInfo !== undefined ? putGymInfo : {}) : (putGymInfo || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo1} putGymInfo1 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutFAQ(gymUnid: string, putGymInfo1: PutGymInfo1, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminPutFAQ.');
            }
            // verify required parameter 'putGymInfo1' is not null or undefined
            if (putGymInfo1 === null || putGymInfo1 === undefined) {
                throw new RequiredError('putGymInfo1','Required parameter putGymInfo1 was null or undefined when calling adminPutFAQ.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/faq`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof putGymInfo1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(putGymInfo1 !== undefined ? putGymInfo1 : {}) : (putGymInfo1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo2} putGymInfo2 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutPolicy(gymUnid: string, putGymInfo2: PutGymInfo2, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminPutPolicy.');
            }
            // verify required parameter 'putGymInfo2' is not null or undefined
            if (putGymInfo2 === null || putGymInfo2 === undefined) {
                throw new RequiredError('putGymInfo2','Required parameter putGymInfo2 was null or undefined when calling adminPutPolicy.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/policy`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof putGymInfo2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(putGymInfo2 !== undefined ? putGymInfo2 : {}) : (putGymInfo2 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo3} putGymInfo3 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutPrivacy(gymUnid: string, putGymInfo3: PutGymInfo3, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminPutPrivacy.');
            }
            // verify required parameter 'putGymInfo3' is not null or undefined
            if (putGymInfo3 === null || putGymInfo3 === undefined) {
                throw new RequiredError('putGymInfo3','Required parameter putGymInfo3 was null or undefined when calling adminPutPrivacy.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/privacy`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof putGymInfo3 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(putGymInfo3 !== undefined ? putGymInfo3 : {}) : (putGymInfo3 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo4} putGymInfo4 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutTerms(gymUnid: string, putGymInfo4: PutGymInfo4, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminPutTerms.');
            }
            // verify required parameter 'putGymInfo4' is not null or undefined
            if (putGymInfo4 === null || putGymInfo4 === undefined) {
                throw new RequiredError('putGymInfo4','Required parameter putGymInfo4 was null or undefined when calling adminPutTerms.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/terms`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof putGymInfo4 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(putGymInfo4 !== undefined ? putGymInfo4 : {}) : (putGymInfo4 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo5} putGymInfo5 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutWaiver(gymUnid: string, putGymInfo5: PutGymInfo5, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling adminPutWaiver.');
            }
            // verify required parameter 'putGymInfo5' is not null or undefined
            if (putGymInfo5 === null || putGymInfo5 === undefined) {
                throw new RequiredError('putGymInfo5','Required parameter putGymInfo5 was null or undefined when calling adminPutWaiver.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/waiver`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof putGymInfo5 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(putGymInfo5 !== undefined ? putGymInfo5 : {}) : (putGymInfo5 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2586a013de14119A8e78cebfb61d0ae(gymUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling b2586a013de14119A8e78cebfb61d0ae.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/terms`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        be9b0b94Bdab475f8428Ddeb94f450dc(gymUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling be9b0b94Bdab475f8428Ddeb94f450dc.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/products`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e16a6746B3b043b0Ac6aC9993065eae6(gymUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling e16a6746B3b043b0Ac6aC9993065eae6.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/info/policy`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {EditGym} editGym 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editGym(gymUnid: string, editGym: EditGym, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling editGym.');
            }
            // verify required parameter 'editGym' is not null or undefined
            if (editGym === null || editGym === undefined) {
                throw new RequiredError('editGym','Required parameter editGym was null or undefined when calling editGym.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof editGym !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(editGym !== undefined ? editGym : {}) : (editGym || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGymsUserOwnsOrAdmins(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/admins/gyms/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {InitiateMember} initiateMember 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateMember(gymUnid: string, initiateMember: InitiateMember, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'gymUnid' is not null or undefined
            if (gymUnid === null || gymUnid === undefined) {
                throw new RequiredError('gymUnid','Required parameter gymUnid was null or undefined when calling initiateMember.');
            }
            // verify required parameter 'initiateMember' is not null or undefined
            if (initiateMember === null || initiateMember === undefined) {
                throw new RequiredError('initiateMember','Required parameter initiateMember was null or undefined when calling initiateMember.');
            }
            const localVarPath = `/admins/gyms/{gymUnid}/members`
                .replace(`{${"gymUnid"}}`, encodeURIComponent(String(gymUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof initiateMember !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(initiateMember !== undefined ? initiateMember : {}) : (initiateMember || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminGymsApi - functional programming interface
 * @export
 */
export const AdminGymsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0045155a04564473B7b2A09b0ce9fa65(gymUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration)._0045155a04564473B7b2A09b0ce9fa65(gymUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _123525dcF5584afb8741C4553d4ca3fc(gymUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration)._123525dcF5584afb8741C4553d4ca3fc(gymUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _15784722010a41baB0a35c520f50f606(gymUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration)._15784722010a41baB0a35c520f50f606(gymUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _3658e5e09ee641bbA7e2Fad9a99248d6(gymUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration)._3658e5e09ee641bbA7e2Fad9a99248d6(gymUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _738b80b2E8ba46d088baD6992a6ff428(gymUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration)._738b80b2E8ba46d088baD6992a6ff428(gymUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _7e5ba651A39d4b41B457871cd26036de(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration)._7e5ba651A39d4b41B457871cd26036de(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a08006eb8c004d7cB2599b26534382e7(gymUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).a08006eb8c004d7cB2599b26534382e7(gymUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a8d4259979c947b8962cE5f60117d4f7(gymUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).a8d4259979c947b8962cE5f60117d4f7(gymUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {AddGym} addGym 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGym(addGym: AddGym, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).addGym(addGym, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {AddProduct} addProduct 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGymProduct(gymUnid: string, addProduct: AddProduct, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymProductResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).addGymProduct(gymUnid, addProduct, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {AddWorkout} addWorkout 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGymWorkout(gymUnid: string, addWorkout: AddWorkout, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymWorkoutResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).addGymWorkout(gymUnid, addWorkout, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAbout(gymUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminGetAbout(gymUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetFAQ(gymUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminGetFAQ(gymUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGymProducts(gymUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymProductsWithPlansResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminGetGymProducts(gymUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGymWorkouts(gymUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymWorkoutsResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminGetGymWorkouts(gymUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPolicy(gymUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminGetPolicy(gymUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPrivacy(gymUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminGetPrivacy(gymUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTerms(gymUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminGetTerms(gymUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetWaiver(gymUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminGetWaiver(gymUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo} putGymInfo 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutAbout(gymUnid: string, putGymInfo: PutGymInfo, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminPutAbout(gymUnid, putGymInfo, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo1} putGymInfo1 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutFAQ(gymUnid: string, putGymInfo1: PutGymInfo1, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminPutFAQ(gymUnid, putGymInfo1, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo2} putGymInfo2 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutPolicy(gymUnid: string, putGymInfo2: PutGymInfo2, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminPutPolicy(gymUnid, putGymInfo2, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo3} putGymInfo3 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutPrivacy(gymUnid: string, putGymInfo3: PutGymInfo3, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminPutPrivacy(gymUnid, putGymInfo3, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo4} putGymInfo4 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutTerms(gymUnid: string, putGymInfo4: PutGymInfo4, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminPutTerms(gymUnid, putGymInfo4, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo5} putGymInfo5 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutWaiver(gymUnid: string, putGymInfo5: PutGymInfo5, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymInfoResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).adminPutWaiver(gymUnid, putGymInfo5, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2586a013de14119A8e78cebfb61d0ae(gymUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).b2586a013de14119A8e78cebfb61d0ae(gymUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        be9b0b94Bdab475f8428Ddeb94f450dc(gymUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).be9b0b94Bdab475f8428Ddeb94f450dc(gymUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e16a6746B3b043b0Ac6aC9993065eae6(gymUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).e16a6746B3b043b0Ac6aC9993065eae6(gymUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {EditGym} editGym 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editGym(gymUnid: string, editGym: EditGym, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).editGym(gymUnid, editGym, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGymsUserOwnsOrAdmins(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymsResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).getGymsUserOwnsOrAdmins(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {InitiateMember} initiateMember 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateMember(gymUnid: string, initiateMember: InitiateMember, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesJoinGymResponse> {
            const localVarAxiosArgs = AdminGymsApiAxiosParamCreator(configuration).initiateMember(gymUnid, initiateMember, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminGymsApi - factory interface
 * @export
 */
export const AdminGymsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _0045155a04564473B7b2A09b0ce9fa65(gymUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration)._0045155a04564473B7b2A09b0ce9fa65(gymUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _123525dcF5584afb8741C4553d4ca3fc(gymUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration)._123525dcF5584afb8741C4553d4ca3fc(gymUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _15784722010a41baB0a35c520f50f606(gymUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration)._15784722010a41baB0a35c520f50f606(gymUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _3658e5e09ee641bbA7e2Fad9a99248d6(gymUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration)._3658e5e09ee641bbA7e2Fad9a99248d6(gymUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _738b80b2E8ba46d088baD6992a6ff428(gymUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration)._738b80b2E8ba46d088baD6992a6ff428(gymUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _7e5ba651A39d4b41B457871cd26036de(options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration)._7e5ba651A39d4b41B457871cd26036de(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a08006eb8c004d7cB2599b26534382e7(gymUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration).a08006eb8c004d7cB2599b26534382e7(gymUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a8d4259979c947b8962cE5f60117d4f7(gymUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration).a8d4259979c947b8962cE5f60117d4f7(gymUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {AddGym} addGym 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGym(addGym: AddGym, token?: string, options?: any): AxiosPromise<ResponsesGymResponse> {
            return AdminGymsApiFp(configuration).addGym(addGym, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {AddProduct} addProduct 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGymProduct(gymUnid: string, addProduct: AddProduct, token?: string, options?: any): AxiosPromise<ResponsesGymProductResponse> {
            return AdminGymsApiFp(configuration).addGymProduct(gymUnid, addProduct, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {AddWorkout} addWorkout 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGymWorkout(gymUnid: string, addWorkout: AddWorkout, token?: string, options?: any): AxiosPromise<ResponsesGymWorkoutResponse> {
            return AdminGymsApiFp(configuration).addGymWorkout(gymUnid, addWorkout, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAbout(gymUnid: string, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminGetAbout(gymUnid, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetFAQ(gymUnid: string, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminGetFAQ(gymUnid, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGymProducts(gymUnid: string, token?: string, options?: any): AxiosPromise<ResponsesGymProductsWithPlansResponse> {
            return AdminGymsApiFp(configuration).adminGetGymProducts(gymUnid, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGymWorkouts(gymUnid: string, token?: string, options?: any): AxiosPromise<ResponsesGymWorkoutsResponse> {
            return AdminGymsApiFp(configuration).adminGetGymWorkouts(gymUnid, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPolicy(gymUnid: string, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminGetPolicy(gymUnid, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPrivacy(gymUnid: string, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminGetPrivacy(gymUnid, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTerms(gymUnid: string, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminGetTerms(gymUnid, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetWaiver(gymUnid: string, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminGetWaiver(gymUnid, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo} putGymInfo 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutAbout(gymUnid: string, putGymInfo: PutGymInfo, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminPutAbout(gymUnid, putGymInfo, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo1} putGymInfo1 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutFAQ(gymUnid: string, putGymInfo1: PutGymInfo1, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminPutFAQ(gymUnid, putGymInfo1, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo2} putGymInfo2 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutPolicy(gymUnid: string, putGymInfo2: PutGymInfo2, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminPutPolicy(gymUnid, putGymInfo2, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo3} putGymInfo3 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutPrivacy(gymUnid: string, putGymInfo3: PutGymInfo3, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminPutPrivacy(gymUnid, putGymInfo3, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo4} putGymInfo4 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutTerms(gymUnid: string, putGymInfo4: PutGymInfo4, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminPutTerms(gymUnid, putGymInfo4, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {PutGymInfo5} putGymInfo5 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutWaiver(gymUnid: string, putGymInfo5: PutGymInfo5, token?: string, options?: any): AxiosPromise<ResponsesGymInfoResponse> {
            return AdminGymsApiFp(configuration).adminPutWaiver(gymUnid, putGymInfo5, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2586a013de14119A8e78cebfb61d0ae(gymUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration).b2586a013de14119A8e78cebfb61d0ae(gymUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        be9b0b94Bdab475f8428Ddeb94f450dc(gymUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration).be9b0b94Bdab475f8428Ddeb94f450dc(gymUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e16a6746B3b043b0Ac6aC9993065eae6(gymUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminGymsApiFp(configuration).e16a6746B3b043b0Ac6aC9993065eae6(gymUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {EditGym} editGym 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editGym(gymUnid: string, editGym: EditGym, token?: string, options?: any): AxiosPromise<ResponsesGymResponse> {
            return AdminGymsApiFp(configuration).editGym(gymUnid, editGym, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGymsUserOwnsOrAdmins(token?: string, options?: any): AxiosPromise<ResponsesGymsResponse> {
            return AdminGymsApiFp(configuration).getGymsUserOwnsOrAdmins(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} gymUnid 
         * @param {InitiateMember} initiateMember 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateMember(gymUnid: string, initiateMember: InitiateMember, token?: string, options?: any): AxiosPromise<ResponsesJoinGymResponse> {
            return AdminGymsApiFp(configuration).initiateMember(gymUnid, initiateMember, token, options)(axios, basePath);
        },
    };
};

/**
 * AdminGymsApi - object-oriented interface
 * @export
 * @class AdminGymsApi
 * @extends {BaseAPI}
 */
export class AdminGymsApi extends BaseAPI {
    /**
     * 
     * @param {string} gymUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public _0045155a04564473B7b2A09b0ce9fa65(gymUnid: string, options?: any) {
        return AdminGymsApiFp(this.configuration)._0045155a04564473B7b2A09b0ce9fa65(gymUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public _123525dcF5584afb8741C4553d4ca3fc(gymUnid: string, options?: any) {
        return AdminGymsApiFp(this.configuration)._123525dcF5584afb8741C4553d4ca3fc(gymUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public _15784722010a41baB0a35c520f50f606(gymUnid: string, options?: any) {
        return AdminGymsApiFp(this.configuration)._15784722010a41baB0a35c520f50f606(gymUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public _3658e5e09ee641bbA7e2Fad9a99248d6(gymUnid: string, options?: any) {
        return AdminGymsApiFp(this.configuration)._3658e5e09ee641bbA7e2Fad9a99248d6(gymUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public _738b80b2E8ba46d088baD6992a6ff428(gymUnid: string, options?: any) {
        return AdminGymsApiFp(this.configuration)._738b80b2E8ba46d088baD6992a6ff428(gymUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public _7e5ba651A39d4b41B457871cd26036de(options?: any) {
        return AdminGymsApiFp(this.configuration)._7e5ba651A39d4b41B457871cd26036de(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public a08006eb8c004d7cB2599b26534382e7(gymUnid: string, options?: any) {
        return AdminGymsApiFp(this.configuration).a08006eb8c004d7cB2599b26534382e7(gymUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public a8d4259979c947b8962cE5f60117d4f7(gymUnid: string, options?: any) {
        return AdminGymsApiFp(this.configuration).a8d4259979c947b8962cE5f60117d4f7(gymUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {AddGym} addGym 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public addGym(addGym: AddGym, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).addGym(addGym, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {AddProduct} addProduct 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public addGymProduct(gymUnid: string, addProduct: AddProduct, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).addGymProduct(gymUnid, addProduct, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {AddWorkout} addWorkout 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public addGymWorkout(gymUnid: string, addWorkout: AddWorkout, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).addGymWorkout(gymUnid, addWorkout, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminGetAbout(gymUnid: string, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminGetAbout(gymUnid, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminGetFAQ(gymUnid: string, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminGetFAQ(gymUnid, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminGetGymProducts(gymUnid: string, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminGetGymProducts(gymUnid, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminGetGymWorkouts(gymUnid: string, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminGetGymWorkouts(gymUnid, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminGetPolicy(gymUnid: string, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminGetPolicy(gymUnid, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminGetPrivacy(gymUnid: string, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminGetPrivacy(gymUnid, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminGetTerms(gymUnid: string, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminGetTerms(gymUnid, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminGetWaiver(gymUnid: string, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminGetWaiver(gymUnid, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {PutGymInfo} putGymInfo 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminPutAbout(gymUnid: string, putGymInfo: PutGymInfo, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminPutAbout(gymUnid, putGymInfo, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {PutGymInfo1} putGymInfo1 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminPutFAQ(gymUnid: string, putGymInfo1: PutGymInfo1, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminPutFAQ(gymUnid, putGymInfo1, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {PutGymInfo2} putGymInfo2 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminPutPolicy(gymUnid: string, putGymInfo2: PutGymInfo2, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminPutPolicy(gymUnid, putGymInfo2, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {PutGymInfo3} putGymInfo3 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminPutPrivacy(gymUnid: string, putGymInfo3: PutGymInfo3, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminPutPrivacy(gymUnid, putGymInfo3, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {PutGymInfo4} putGymInfo4 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminPutTerms(gymUnid: string, putGymInfo4: PutGymInfo4, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminPutTerms(gymUnid, putGymInfo4, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {PutGymInfo5} putGymInfo5 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public adminPutWaiver(gymUnid: string, putGymInfo5: PutGymInfo5, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).adminPutWaiver(gymUnid, putGymInfo5, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public b2586a013de14119A8e78cebfb61d0ae(gymUnid: string, options?: any) {
        return AdminGymsApiFp(this.configuration).b2586a013de14119A8e78cebfb61d0ae(gymUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public be9b0b94Bdab475f8428Ddeb94f450dc(gymUnid: string, options?: any) {
        return AdminGymsApiFp(this.configuration).be9b0b94Bdab475f8428Ddeb94f450dc(gymUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public e16a6746B3b043b0Ac6aC9993065eae6(gymUnid: string, options?: any) {
        return AdminGymsApiFp(this.configuration).e16a6746B3b043b0Ac6aC9993065eae6(gymUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {EditGym} editGym 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public editGym(gymUnid: string, editGym: EditGym, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).editGym(gymUnid, editGym, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public getGymsUserOwnsOrAdmins(token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).getGymsUserOwnsOrAdmins(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} gymUnid 
     * @param {InitiateMember} initiateMember 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminGymsApi
     */
    public initiateMember(gymUnid: string, initiateMember: InitiateMember, token?: string, options?: any) {
        return AdminGymsApiFp(this.configuration).initiateMember(gymUnid, initiateMember, token, options)(this.axios, this.basePath);
    }

}


/**
 * AdminWorkoutsApi - axios parameter creator
 * @export
 */
export const AdminWorkoutsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} workoutUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _15cd264989094eebB6bd3645f9f85af4(workoutUnid: string, options: any = {}): RequestArgs {
            // verify required parameter 'workoutUnid' is not null or undefined
            if (workoutUnid === null || workoutUnid === undefined) {
                throw new RequiredError('workoutUnid','Required parameter workoutUnid was null or undefined when calling _15cd264989094eebB6bd3645f9f85af4.');
            }
            const localVarPath = `/admins/workouts/{workoutUnid}`
                .replace(`{${"workoutUnid"}}`, encodeURIComponent(String(workoutUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workoutUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGymWorkout(workoutUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'workoutUnid' is not null or undefined
            if (workoutUnid === null || workoutUnid === undefined) {
                throw new RequiredError('workoutUnid','Required parameter workoutUnid was null or undefined when calling adminGetGymWorkout.');
            }
            const localVarPath = `/admins/workouts/{workoutUnid}`
                .replace(`{${"workoutUnid"}}`, encodeURIComponent(String(workoutUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workoutUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGymWorkout(workoutUnid: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'workoutUnid' is not null or undefined
            if (workoutUnid === null || workoutUnid === undefined) {
                throw new RequiredError('workoutUnid','Required parameter workoutUnid was null or undefined when calling deleteGymWorkout.');
            }
            const localVarPath = `/admins/workouts/{workoutUnid}`
                .replace(`{${"workoutUnid"}}`, encodeURIComponent(String(workoutUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workoutUnid 
         * @param {EditWorkout} editWorkout 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editGymWorkout(workoutUnid: string, editWorkout: EditWorkout, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'workoutUnid' is not null or undefined
            if (workoutUnid === null || workoutUnid === undefined) {
                throw new RequiredError('workoutUnid','Required parameter workoutUnid was null or undefined when calling editGymWorkout.');
            }
            // verify required parameter 'editWorkout' is not null or undefined
            if (editWorkout === null || editWorkout === undefined) {
                throw new RequiredError('editWorkout','Required parameter editWorkout was null or undefined when calling editGymWorkout.');
            }
            const localVarPath = `/admins/workouts/{workoutUnid}`
                .replace(`{${"workoutUnid"}}`, encodeURIComponent(String(workoutUnid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof editWorkout !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(editWorkout !== undefined ? editWorkout : {}) : (editWorkout || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminWorkoutsApi - functional programming interface
 * @export
 */
export const AdminWorkoutsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} workoutUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _15cd264989094eebB6bd3645f9f85af4(workoutUnid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminWorkoutsApiAxiosParamCreator(configuration)._15cd264989094eebB6bd3645f9f85af4(workoutUnid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} workoutUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGymWorkout(workoutUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymWorkoutResponse> {
            const localVarAxiosArgs = AdminWorkoutsApiAxiosParamCreator(configuration).adminGetGymWorkout(workoutUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} workoutUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGymWorkout(workoutUnid: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminWorkoutsApiAxiosParamCreator(configuration).deleteGymWorkout(workoutUnid, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} workoutUnid 
         * @param {EditWorkout} editWorkout 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editGymWorkout(workoutUnid: string, editWorkout: EditWorkout, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGymWorkoutResponse> {
            const localVarAxiosArgs = AdminWorkoutsApiAxiosParamCreator(configuration).editGymWorkout(workoutUnid, editWorkout, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminWorkoutsApi - factory interface
 * @export
 */
export const AdminWorkoutsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} workoutUnid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _15cd264989094eebB6bd3645f9f85af4(workoutUnid: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminWorkoutsApiFp(configuration)._15cd264989094eebB6bd3645f9f85af4(workoutUnid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} workoutUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetGymWorkout(workoutUnid: string, token?: string, options?: any): AxiosPromise<ResponsesGymWorkoutResponse> {
            return AdminWorkoutsApiFp(configuration).adminGetGymWorkout(workoutUnid, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} workoutUnid 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGymWorkout(workoutUnid: string, token?: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminWorkoutsApiFp(configuration).deleteGymWorkout(workoutUnid, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} workoutUnid 
         * @param {EditWorkout} editWorkout 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editGymWorkout(workoutUnid: string, editWorkout: EditWorkout, token?: string, options?: any): AxiosPromise<ResponsesGymWorkoutResponse> {
            return AdminWorkoutsApiFp(configuration).editGymWorkout(workoutUnid, editWorkout, token, options)(axios, basePath);
        },
    };
};

/**
 * AdminWorkoutsApi - object-oriented interface
 * @export
 * @class AdminWorkoutsApi
 * @extends {BaseAPI}
 */
export class AdminWorkoutsApi extends BaseAPI {
    /**
     * 
     * @param {string} workoutUnid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminWorkoutsApi
     */
    public _15cd264989094eebB6bd3645f9f85af4(workoutUnid: string, options?: any) {
        return AdminWorkoutsApiFp(this.configuration)._15cd264989094eebB6bd3645f9f85af4(workoutUnid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} workoutUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminWorkoutsApi
     */
    public adminGetGymWorkout(workoutUnid: string, token?: string, options?: any) {
        return AdminWorkoutsApiFp(this.configuration).adminGetGymWorkout(workoutUnid, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} workoutUnid 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminWorkoutsApi
     */
    public deleteGymWorkout(workoutUnid: string, token?: string, options?: any) {
        return AdminWorkoutsApiFp(this.configuration).deleteGymWorkout(workoutUnid, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} workoutUnid 
     * @param {EditWorkout} editWorkout 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminWorkoutsApi
     */
    public editGymWorkout(workoutUnid: string, editWorkout: EditWorkout, token?: string, options?: any) {
        return AdminWorkoutsApiFp(this.configuration).editGymWorkout(workoutUnid, editWorkout, token, options)(this.axios, this.basePath);
    }

}


/**
 * AdminsApi - axios parameter creator
 * @export
 */
export const AdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _2a96f5f3B7fa47dd8e2454fd2a7a6556(options: any = {}): RequestArgs {
            const localVarPath = `/admins/connect`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _4d2d5f65F02b4aac86f3B5c55441e6a5(options: any = {}): RequestArgs {
            const localVarPath = `/admins/resetPassword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _548fdca62c374739A7a5C756dbe61920(options: any = {}): RequestArgs {
            const localVarPath = `/admins/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _78fdf20eB3af407cAa2e9daf178e1f89(options: any = {}): RequestArgs {
            const localVarPath = `/admins/payments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a9cae7cd2b9c4922Ac802e1c930dcf47(options: any = {}): RequestArgs {
            const localVarPath = `/admins/profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditProfile} editProfile 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEditUserProfile(editProfile: EditProfile, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'editProfile' is not null or undefined
            if (editProfile === null || editProfile === undefined) {
                throw new RequiredError('editProfile','Required parameter editProfile was null or undefined when calling adminEditUserProfile.');
            }
            const localVarPath = `/admins/profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof editProfile !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(editProfile !== undefined ? editProfile : {}) : (editProfile || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPassword} forgotPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminForgotPassword(forgotPassword: ForgotPassword, options: any = {}): RequestArgs {
            // verify required parameter 'forgotPassword' is not null or undefined
            if (forgotPassword === null || forgotPassword === undefined) {
                throw new RequiredError('forgotPassword','Required parameter forgotPassword was null or undefined when calling adminForgotPassword.');
            }
            const localVarPath = `/admins/forgotPassword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof forgotPassword !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(forgotPassword !== undefined ? forgotPassword : {}) : (forgotPassword || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProfile(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/admins/profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginAccount} loginAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLogin(loginAccount: LoginAccount, options: any = {}): RequestArgs {
            // verify required parameter 'loginAccount' is not null or undefined
            if (loginAccount === null || loginAccount === undefined) {
                throw new RequiredError('loginAccount','Required parameter loginAccount was null or undefined when calling adminLogin.');
            }
            const localVarPath = `/admins/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginAccount !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginAccount !== undefined ? loginAccount : {}) : (loginAccount || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPassword} resetPassword 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminResetPassword(resetPassword: ResetPassword, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'resetPassword' is not null or undefined
            if (resetPassword === null || resetPassword === undefined) {
                throw new RequiredError('resetPassword','Required parameter resetPassword was null or undefined when calling adminResetPassword.');
            }
            const localVarPath = `/admins/resetPassword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resetPassword !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resetPassword !== undefined ? resetPassword : {}) : (resetPassword || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignUpAccount} signUpAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSignUp(signUpAccount: SignUpAccount, options: any = {}): RequestArgs {
            // verify required parameter 'signUpAccount' is not null or undefined
            if (signUpAccount === null || signUpAccount === undefined) {
                throw new RequiredError('signUpAccount','Required parameter signUpAccount was null or undefined when calling adminSignUp.');
            }
            const localVarPath = `/admins/signup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof signUpAccount !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(signUpAccount !== undefined ? signUpAccount : {}) : (signUpAccount || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baf93720Edd14b01Af4bE7f4324aca5f(options: any = {}): RequestArgs {
            const localVarPath = `/admins/forgotPassword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c750357d0619469eAbd215c9466e6b96(options: any = {}): RequestArgs {
            const localVarPath = `/admins/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e2885c7c9b594af2Ac602c23ef07a4e5(options: any = {}): RequestArgs {
            const localVarPath = `/admins/connect/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e91f07123dbb42469b468fcd60aa43c6(options: any = {}): RequestArgs {
            const localVarPath = `/admins/signup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAtomProducts(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/admins/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartConnectLink(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/admins/connect`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeImportProducts(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/admins/imports/stripe/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeImportUsers(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/admins/imports/stripe/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductPurchase} productPurchase 
         * @param {string} [couponCode] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseAtomProduct(productPurchase: ProductPurchase, couponCode?: string, token?: string, options: any = {}): RequestArgs {
            // verify required parameter 'productPurchase' is not null or undefined
            if (productPurchase === null || productPurchase === undefined) {
                throw new RequiredError('productPurchase','Required parameter productPurchase was null or undefined when calling purchaseAtomProduct.');
            }
            const localVarPath = `/admins/payments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (couponCode !== undefined) {
                localVarQueryParameter['couponCode'] = couponCode;
            }

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof productPurchase !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(productPurchase !== undefined ? productPurchase : {}) : (productPurchase || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [error] 
         * @param {string} [errorDescription] 
         * @param {string} [scope] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeConnectCode(code?: string, error?: string, errorDescription?: string, scope?: string, state?: string, options: any = {}): RequestArgs {
            const localVarPath = `/admins/connect/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (error !== undefined) {
                localVarQueryParameter['error'] = error;
            }

            if (errorDescription !== undefined) {
                localVarQueryParameter['error_description'] = errorDescription;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminsApi - functional programming interface
 * @export
 */
export const AdminsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _2a96f5f3B7fa47dd8e2454fd2a7a6556(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration)._2a96f5f3B7fa47dd8e2454fd2a7a6556(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _4d2d5f65F02b4aac86f3B5c55441e6a5(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration)._4d2d5f65F02b4aac86f3B5c55441e6a5(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _548fdca62c374739A7a5C756dbe61920(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration)._548fdca62c374739A7a5C756dbe61920(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _78fdf20eB3af407cAa2e9daf178e1f89(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration)._78fdf20eB3af407cAa2e9daf178e1f89(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a9cae7cd2b9c4922Ac802e1c930dcf47(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).a9cae7cd2b9c4922Ac802e1c930dcf47(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {EditProfile} editProfile 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEditUserProfile(editProfile: EditProfile, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesAdminProfileResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).adminEditUserProfile(editProfile, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ForgotPassword} forgotPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminForgotPassword(forgotPassword: ForgotPassword, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).adminForgotPassword(forgotPassword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProfile(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesAdminProfileResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).adminGetProfile(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LoginAccount} loginAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLogin(loginAccount: LoginAccount, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesAdminLoginResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).adminLogin(loginAccount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ResetPassword} resetPassword 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminResetPassword(resetPassword: ResetPassword, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).adminResetPassword(resetPassword, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SignUpAccount} signUpAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSignUp(signUpAccount: SignUpAccount, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesAdminLoginResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).adminSignUp(signUpAccount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baf93720Edd14b01Af4bE7f4324aca5f(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).baf93720Edd14b01Af4bE7f4324aca5f(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c750357d0619469eAbd215c9466e6b96(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).c750357d0619469eAbd215c9466e6b96(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e2885c7c9b594af2Ac602c23ef07a4e5(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).e2885c7c9b594af2Ac602c23ef07a4e5(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e91f07123dbb42469b468fcd60aa43c6(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).e91f07123dbb42469b468fcd60aa43c6(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAtomProducts(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesAtomProductsResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).getAtomProducts(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartConnectLink(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesStripeConnectLinkResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).getStartConnectLink(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeImportProducts(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGetStripeImportProductsResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).getStripeImportProducts(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeImportUsers(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesGetStripeImportUsersResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).getStripeImportUsers(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ProductPurchase} productPurchase 
         * @param {string} [couponCode] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseAtomProduct(productPurchase: ProductPurchase, couponCode?: string, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).purchaseAtomProduct(productPurchase, couponCode, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [error] 
         * @param {string} [errorDescription] 
         * @param {string} [scope] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeConnectCode(code?: string, error?: string, errorDescription?: string, scope?: string, state?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsesBaseResponse> {
            const localVarAxiosArgs = AdminsApiAxiosParamCreator(configuration).stripeConnectCode(code, error, errorDescription, scope, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminsApi - factory interface
 * @export
 */
export const AdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _2a96f5f3B7fa47dd8e2454fd2a7a6556(options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration)._2a96f5f3B7fa47dd8e2454fd2a7a6556(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _4d2d5f65F02b4aac86f3B5c55441e6a5(options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration)._4d2d5f65F02b4aac86f3B5c55441e6a5(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _548fdca62c374739A7a5C756dbe61920(options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration)._548fdca62c374739A7a5C756dbe61920(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _78fdf20eB3af407cAa2e9daf178e1f89(options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration)._78fdf20eB3af407cAa2e9daf178e1f89(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a9cae7cd2b9c4922Ac802e1c930dcf47(options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration).a9cae7cd2b9c4922Ac802e1c930dcf47(options)(axios, basePath);
        },
        /**
         * 
         * @param {EditProfile} editProfile 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEditUserProfile(editProfile: EditProfile, token?: string, options?: any): AxiosPromise<ResponsesAdminProfileResponse> {
            return AdminsApiFp(configuration).adminEditUserProfile(editProfile, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {ForgotPassword} forgotPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminForgotPassword(forgotPassword: ForgotPassword, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration).adminForgotPassword(forgotPassword, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProfile(token?: string, options?: any): AxiosPromise<ResponsesAdminProfileResponse> {
            return AdminsApiFp(configuration).adminGetProfile(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {LoginAccount} loginAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLogin(loginAccount: LoginAccount, options?: any): AxiosPromise<ResponsesAdminLoginResponse> {
            return AdminsApiFp(configuration).adminLogin(loginAccount, options)(axios, basePath);
        },
        /**
         * 
         * @param {ResetPassword} resetPassword 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminResetPassword(resetPassword: ResetPassword, token?: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration).adminResetPassword(resetPassword, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {SignUpAccount} signUpAccount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSignUp(signUpAccount: SignUpAccount, options?: any): AxiosPromise<ResponsesAdminLoginResponse> {
            return AdminsApiFp(configuration).adminSignUp(signUpAccount, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baf93720Edd14b01Af4bE7f4324aca5f(options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration).baf93720Edd14b01Af4bE7f4324aca5f(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        c750357d0619469eAbd215c9466e6b96(options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration).c750357d0619469eAbd215c9466e6b96(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e2885c7c9b594af2Ac602c23ef07a4e5(options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration).e2885c7c9b594af2Ac602c23ef07a4e5(options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e91f07123dbb42469b468fcd60aa43c6(options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration).e91f07123dbb42469b468fcd60aa43c6(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAtomProducts(token?: string, options?: any): AxiosPromise<ResponsesAtomProductsResponse> {
            return AdminsApiFp(configuration).getAtomProducts(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartConnectLink(token?: string, options?: any): AxiosPromise<ResponsesStripeConnectLinkResponse> {
            return AdminsApiFp(configuration).getStartConnectLink(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeImportProducts(token?: string, options?: any): AxiosPromise<ResponsesGetStripeImportProductsResponse> {
            return AdminsApiFp(configuration).getStripeImportProducts(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStripeImportUsers(token?: string, options?: any): AxiosPromise<ResponsesGetStripeImportUsersResponse> {
            return AdminsApiFp(configuration).getStripeImportUsers(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {ProductPurchase} productPurchase 
         * @param {string} [couponCode] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseAtomProduct(productPurchase: ProductPurchase, couponCode?: string, token?: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration).purchaseAtomProduct(productPurchase, couponCode, token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [code] 
         * @param {string} [error] 
         * @param {string} [errorDescription] 
         * @param {string} [scope] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeConnectCode(code?: string, error?: string, errorDescription?: string, scope?: string, state?: string, options?: any): AxiosPromise<ResponsesBaseResponse> {
            return AdminsApiFp(configuration).stripeConnectCode(code, error, errorDescription, scope, state, options)(axios, basePath);
        },
    };
};

/**
 * AdminsApi - object-oriented interface
 * @export
 * @class AdminsApi
 * @extends {BaseAPI}
 */
export class AdminsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public _2a96f5f3B7fa47dd8e2454fd2a7a6556(options?: any) {
        return AdminsApiFp(this.configuration)._2a96f5f3B7fa47dd8e2454fd2a7a6556(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public _4d2d5f65F02b4aac86f3B5c55441e6a5(options?: any) {
        return AdminsApiFp(this.configuration)._4d2d5f65F02b4aac86f3B5c55441e6a5(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public _548fdca62c374739A7a5C756dbe61920(options?: any) {
        return AdminsApiFp(this.configuration)._548fdca62c374739A7a5C756dbe61920(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public _78fdf20eB3af407cAa2e9daf178e1f89(options?: any) {
        return AdminsApiFp(this.configuration)._78fdf20eB3af407cAa2e9daf178e1f89(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public a9cae7cd2b9c4922Ac802e1c930dcf47(options?: any) {
        return AdminsApiFp(this.configuration).a9cae7cd2b9c4922Ac802e1c930dcf47(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {EditProfile} editProfile 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminEditUserProfile(editProfile: EditProfile, token?: string, options?: any) {
        return AdminsApiFp(this.configuration).adminEditUserProfile(editProfile, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ForgotPassword} forgotPassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminForgotPassword(forgotPassword: ForgotPassword, options?: any) {
        return AdminsApiFp(this.configuration).adminForgotPassword(forgotPassword, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminGetProfile(token?: string, options?: any) {
        return AdminsApiFp(this.configuration).adminGetProfile(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {LoginAccount} loginAccount 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminLogin(loginAccount: LoginAccount, options?: any) {
        return AdminsApiFp(this.configuration).adminLogin(loginAccount, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ResetPassword} resetPassword 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminResetPassword(resetPassword: ResetPassword, token?: string, options?: any) {
        return AdminsApiFp(this.configuration).adminResetPassword(resetPassword, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {SignUpAccount} signUpAccount 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminSignUp(signUpAccount: SignUpAccount, options?: any) {
        return AdminsApiFp(this.configuration).adminSignUp(signUpAccount, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public baf93720Edd14b01Af4bE7f4324aca5f(options?: any) {
        return AdminsApiFp(this.configuration).baf93720Edd14b01Af4bE7f4324aca5f(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public c750357d0619469eAbd215c9466e6b96(options?: any) {
        return AdminsApiFp(this.configuration).c750357d0619469eAbd215c9466e6b96(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public e2885c7c9b594af2Ac602c23ef07a4e5(options?: any) {
        return AdminsApiFp(this.configuration).e2885c7c9b594af2Ac602c23ef07a4e5(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public e91f07123dbb42469b468fcd60aa43c6(options?: any) {
        return AdminsApiFp(this.configuration).e91f07123dbb42469b468fcd60aa43c6(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public getAtomProducts(token?: string, options?: any) {
        return AdminsApiFp(this.configuration).getAtomProducts(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public getStartConnectLink(token?: string, options?: any) {
        return AdminsApiFp(this.configuration).getStartConnectLink(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public getStripeImportProducts(token?: string, options?: any) {
        return AdminsApiFp(this.configuration).getStripeImportProducts(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public getStripeImportUsers(token?: string, options?: any) {
        return AdminsApiFp(this.configuration).getStripeImportUsers(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ProductPurchase} productPurchase 
     * @param {string} [couponCode] 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public purchaseAtomProduct(productPurchase: ProductPurchase, couponCode?: string, token?: string, options?: any) {
        return AdminsApiFp(this.configuration).purchaseAtomProduct(productPurchase, couponCode, token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [code] 
     * @param {string} [error] 
     * @param {string} [errorDescription] 
     * @param {string} [scope] 
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public stripeConnectCode(code?: string, error?: string, errorDescription?: string, scope?: string, state?: string, options?: any) {
        return AdminsApiFp(this.configuration).stripeConnectCode(code, error, errorDescription, scope, state, options)(this.axios, this.basePath);
    }

}


